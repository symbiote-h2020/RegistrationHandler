buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
        asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
        swaggerOutputDir = file("${buildDir}/swagger")
        snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
        springfoxVersion = '2.7.0'
        swaggerAnnotationsVersion = '1.5.13'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.owasp:dependency-check-gradle:1.4.5.1")
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.2.1'
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
        classpath("org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1")
        classpath("io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.2.0")
        classpath("io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0")
    }
}

// code
apply plugin: "io.spring.dependency-management"
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

// code quality
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

// IDEs
apply plugin: 'eclipse'
apply plugin: 'idea'

// publishing
apply plugin: 'com.cinnober.gradle.semver-git'

// documentation
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

// XXX please change with your commits according to http://semver.org/
project.version = '0.2.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url "https://jitpack.io" }
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

// Spring related configs
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    
    /* SymbIoTeLibraries manual:
        One can use the library from jitpack by default with the notation:
            compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT') {changing = true }
        or having cloned locally the SymbIoTeLibraries repo use it directly with project dependency by:
            compile project(':SymbIoTeLibraries')
        Important --- In order to use the latter you need to:
            1) switch comments on the artifact and project dependencies
            2) always have only one uncommented
            3) project dependency requires changes in settings.gradle file in this project
            4) never commit build.gradle which has project dependencies active as it will break CI builds
    */
    // compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT') { changing = true }
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:0.2.0')


    // Spring
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    compile('org.springframework.cloud:spring-cloud-starter-feign')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')

    // test only
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.github.tomakehurst:wiremock')
    testCompile('org.springframework:spring-core')
    testCompile("io.springfox:springfox-swagger2:${springfoxVersion}")
    testCompile("io.springfox:springfox-bean-validators:${springfoxVersion}")
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

// code quality below
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadocs")
}

// jacoco configuration section
jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = "build/reports/security"
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport, 'dependencyCheck')


test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = [
            'swagger2markup.pathsGroupedBy' : 'TAGS',
            'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}